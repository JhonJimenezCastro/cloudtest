name: CI-Staging

on:
  push:
    branches:
      - staging

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed
      - edited
    branches:
      - staging

jobs:
  staging:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Run Tests
        run: |
              echo "run snyk sonar etc con el shelltool"

      - name: Deploy
        if: github.event_name == 'push'
        run: |
            echo "deploying rama base con el shelltool"

      - name: Validar que el PR ya pasÃ³ por ambiente previo
        if: ${{ github.event_name == 'pull_request' }}
        env:
          REMOTE: ${{ github.event.pull_request.head.repo.clone_url }}
          ORIGEN: ${{ github.event.pull_request.head.ref }}
          PREVIO_ENV: release
        run: |
          git fetch origin ${PREVIO_ENV}
          LAST_COMMIT=$(git rev-parse origin/${ORIGEN})
    
          COMMON_ANCESTOR=$(git merge-base origin/${PREVIO_ENV} $LAST_COMMIT)
          if [ "$COMMON_ANCESTOR" != "$LAST_COMMIT" ]; then
            echo "Los cambios de la rama ${ORIGEN} deben haber sido integrados previamente en la rama ${PREVIO_ENV}"
            exit 1
          fi
    
      - name: Crear Auto-PR
        if: github.event.pull_request.merged == true
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          OWNER: ${{ github.actor }}
          ORIGEN: ${{ github.event.pull_request.head.ref }}
          DESTINO: "staging"
          TOKEN: ${{ secrets.TOKEN }}
        run: |
          echo -ne "\e[45m[INFO]\e[0m Creando Pull Request para la rama $DESTINO \e[0m\n"

          PR_RESPONSE=$(curl -s -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $TOKEN" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/pulls \
            -d '{
              "title":"Auto-PR: '${ORIGEN}' -> '${DESTINO}'",
              "body":"proceso generado por gitbot",
              "head": "'$ORIGEN'",
              "base": "'$DESTINO'"
            }'
          )
          echo "$PR_RESPONSE"

          sleep 3s

          if [[ $(echo "$PR_RESPONSE" | jq -r '.message') == "Validation Failed" ]]; then
            ERROR_MESSAGE=$(echo "$PR_RESPONSE" | jq -r '.errors[0].message')

            if [[ "$ERROR_MESSAGE" == *"A pull request already exists for"* ]]; then

              EXISTING_PR_URL=$(curl -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $TOKEN" \
                "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls?state=open" | jq -r ".[] 
                | select(.head.ref == \"$ORIGEN\" and .base.ref == \"$DESTINO\") 
                | .html_url")

                echo -ne "\e[41m[ERROR]\e[0m Ya existe un PR para $ORIGEN -> $DESTINO: $EXISTING_PR_URL\e[0m\n"
            else
              echo -ne "\e[41m[ERROR]\e[0m $ERROR_MESSAGE \e[0m\n"
            fi
            exit 1
          fi

          PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.number')
          PR_URL=$(echo "$PR_RESPONSE" | jq -r '.html_url')

          if [[ -z "$PR_NUMBER" ]]; then
            echo -ne "\e[41m[ERROR]\e[0m Error al crear PR ${DESTINO} -> ${DESTINO}\e[0m\n"
            echo -ne "\e[41m[ERROR]\e[0m $PR_RESPONSE \e[0m\n"
            exit 1
          fi

          echo -ne "\e[42m[SUCCESS]\e[0m Pull Request #${PR_NUMBER} creado exitosamente \e[0m\n"
          echo -ne "\e[42m[SUCCESS]\e[0m $PR_URL \e[0m\n"